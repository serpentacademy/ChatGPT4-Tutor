import sqlite3

# Array of strings to be inserted into the 'name' field
arrToInsert = ['Abelian groups', 'Affine space', 'Algebra', 'Associative algebras', 'Banach space', 'Basis', 'Bilinear vector product', 'Bra–ket notation', 'Cartesian coordinates', 'Cartesian geometry', 'Cokernel', 'Completeness', 'Continuous maps', "Cramer's rule", 'Determinant', 'Diagonalization of a matrix', 'Dimension', 'Dual map (Transpose of a linear map)', 'Dual space', 'Duality', 'Eigenvalues and eigenvectors', 'Endomorphisms', 'Finitely generated modules', 'Fourier transform', 'Free modules', 'Frobenius normal form', 'Functional analysis', 'Gaussian elimination', 'Geometric transformations (e.g.', 'Gram–Schmidt procedure', 'Hermitian conjugate', 'Hilbert space', 'Hilbert spaces', 'Homomorphism', 'Inner product', 'Inner-product spaces', 'Invertible matrix', 'Isomorphism', 'Jordan normal form', 'Kernel of a matrix', 'L2 space', 'Limits', 'Linear equation over a ring', 'Linear independence', 'Linear maps', 'Linear programming', 'Linear regression', 'Linear system', 'Linear transformations', 'Lorentz transformations', 'Lp spaces', 'Matrices', 'Matrix inverse', 'Matrix theory', 'Metric', 'Module homomorphisms', 'Multilinear algebra', 'Multivariable linear transformations', 'Norm', 'Normed vector space', 'Numerical linear algebra', 'Orthogonal vectors', 'Orthonormal basis', 'Principal ideal domain', 'Projective space', 'Quantum mechanics applications.', 'Rank of a matrix', 'Reduced row echelon form', 'Ring', 'Scalar', 'Sesquilinear form', 'Span', 'Square matrices', 'Submodule', 'Tensor products', 'Topological vector space', 'Topology', 'Transformation matrix', 'Vector space', 'Vector spaces', 'abelian group', 'and applications in electromagnetism.', 'application to function spaces', 'applications in geometry', 'associativity', 'axioms', 'basis', 'bijective linear map', 'cartesian coordinates', 'column matrix', 'commutativity', 'compatibility', 'computer simulations', 'coordinate vector', 'determinant', 'differential geometry', 'dimension', 'dimension theorem', 'distributivity', 'electric and magnetic field theory', 'electromagnetic symmetries', 'elementary row and column operations', 'field', 'field theory of forces', 'finite-dimensional vector space', 'finite-dimensional vector spaces', 'functional analysis', 'general linear group', 'generating set', 'geometric representations', 'group representation', 'hypercomplex number systems', 'hypercomplex numbers', 'identity element', 'identity matrix', 'image', 'inverse element', 'inverse matrix', 'isomorphism', 'isomorphism testing', 'kernel', 'line segments', 'linear algebra algorithms', 'linear algebra applications', 'linear algebra approximation', 'linear algebra history', 'linear algebra in science and engineering', 'linear algebraic modeling', 'linear algebraic models', 'linear algebraic structure', 'linear associative algebra', 'linear combinations', 'linear equations', 'linear map', 'linear operator', 'linear span', 'linear structure', 'linear subspaces', 'linear system solving', 'linear transformation', 'linear transformations', 'linearly dependent', 'linearly independent', 'matrix', 'matrix decompositions', 'matrix multiplication', 'matrix representation', 'maximal independent sets', 'minimal generating sets', 'multiplicative identity', 'multivariate function differential', 'non-linear systems approximation', 'quaternion', 'quaternion difference', 'reflections)', 'rotations', 'scalar', 'scalar multiplication', 'similar matrices', 'simultaneous linear equations', 'spacetime', 'spanning set', 'subspace', 'symmetries of spacetime', 'systems of linear equations', 'tangent spaces to manifolds', 'telegraph system explanation', 'translations', 'vector addition', 'vector space properties', 'vector spaces isomorphism', 'vector-space structure', 'Module (mathematics)', 'System of linear equations', 'vector space']

# Connect to SQLite database (or create it if it doesn't exist)
connection = sqlite3.connect("LinearAlgebra.sqlite")
cursor = connection.cursor()

# Ensure the table exists; if not, create it
# Assuming 'name' field is of TEXT type; adjust as per your schema


# Insert data from the array into the 'name' field in the 'Concepts' table
for item in arrToInsert:
    cursor.execute("INSERT INTO Concepts (name) VALUES (?)", (item,))

# Commit changes and close connections
connection.commit()
cursor.close()
connection.close()
